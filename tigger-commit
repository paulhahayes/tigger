#!/bin/dash
export PATH="$PATH:$PWD"
 # check repo is initalised
if [ ! -d .tigger ];then 
    >&2 echo tigger-commit: error: tigger repository directory .tigger not found
fi

 # check usage
if  [ ! $# -eq 2 ] && [ ! $# -eq 3 ]; then
    >&2 echo usage: tigger-commit [-a] -m commit-message
    exit 1
fi

# Create variables to access directories
COMMITINDEX=$(wc -l < .tigger/.log )
CURRENTCOMMIT=$((COMMITINDEX-1))
BRANCH="$(find .tigger/branches/.head/ -mindepth 1 -maxdepth 1 -type d -exec basename {} \;)"
BRANCHINDEX="$(find ./.tigger/branches/.head/"$BRANCH"/ -type f  -printf "%f\n" | sort -r | head -1)"
HEAD=."$BRANCH"."$BRANCHINDEX"


#checks if there have been any added files
if [ ! -d .tigger/index/"$HEAD" ]; then 
    echo nothing to commit
    exit 1
fi 


if [ "$1" = "-m" ] && [ $# -eq 2 ]; then

    # check if a previous commit exists and if its the same
    if [ -d .tigger/commits/"$CURRENTCOMMIT" ]; then
           
        if  diff .tigger/commits/"$CURRENTCOMMIT" .tigger/index/"$HEAD" >/dev/null; then
            echo nothing to commit
            exit 1
        fi
    fi
    MESSAGE="$2"

    # check the characters in the message
    if echo "$MESSAGE" | grep -E '^-' >/dev/null; then
        echo "usage: girt-commit [-a] -m commit-message"
        exit 1
    fi

    # record the commit inside the logfile
    echo "$COMMITINDEX" "$MESSAGE" >> .tigger/.log
    echo "$COMMITINDEX" "$MESSAGE" >> .tigger/branches/.head/"$BRANCH"/.log
    echo "$COMMITINDEX" "$BRANCH" "$MESSAGE" >> .tigger/.logDetail
    # create a new commit directory
    mkdir .tigger/commits/"$COMMITINDEX"/

    # copy all the new and modifed files into the new commit directory
    if find .tigger/index/"$HEAD"  -maxdepth 0  -empty | ifne false; then
        for file in .tigger/index/"$HEAD"/*; do
            cp -r "$file" .tigger/commits/"$COMMITINDEX" >/dev/null
        done
    fi

    # set up the next index file
    NEWINDEX=$((BRANCHINDEX+1)) 
    touch .tigger/branches/.head/"$BRANCH"/"$NEWINDEX"

    # make a new index directory, by default it has
    # this was a poor design 
    mkdir -p .tigger/index/."$BRANCH"."$NEWINDEX"
    if find .tigger/index/"$HEAD"  -maxdepth 0  -empty | ifne false; then
        cp -r .tigger/index/"$HEAD"/* .tigger/index/."$BRANCH"."$NEWINDEX" >/dev/null
    fi

    echo Committed as commit "$COMMITINDEX"

    # update the datafiles inside the branch
    cp -r .tigger/commits/"$COMMITINDEX"/* .tigger/branches/"$BRANCH"  2>/dev/null
    echo "$COMMITINDEX" >> .tigger/branches/"$BRANCH"/.commitindex
    echo "$BRANCHINDEX" > .tigger/branches/"$BRANCH"/.branchindex

# commit all
elif [ "$1" = "-a" ] && [ "$2" = "-m" ] && [ -n "$3" ]; then
    MESSAGE="$3"
    # update files if they are in the index
    for file in .tigger/index/"$HEAD"/*; do
        fileCurrDir="$(basename "$file")"
        if [ -f "$fileCurrDir" ]; then
            tigger-add "$fileCurrDir"
        fi
    done
    # recall the script but without the -a
    tigger-commit -m "$MESSAGE" 


else 
    echo usage: tigger-commit [-a] -m commit-message
    exit 1
fi

# after a commit, temporarily remove the changes file
rm -r .tigger/changes 2>/dev/null

